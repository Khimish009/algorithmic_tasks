function any(promises) {
  const wrappedPromises = [...promises].map(el => Promise.resolve(el))

  return new Promise((resolve, reject) => {
    const errors = []
    let errorCount = 0

    wrappedPromises.forEach((promise, index) => {
      promise
        .then(value => resolve(value))
        .catch((err) => {
          errors[index] = err

          errorCount++

          if(errorCount === wrappedPromises.length) {
            reject(
              new AggregateError(
                'No Promise in Promise.any was resolved', 
                errors
              )
            )
          }
        })
    })
  })
}
