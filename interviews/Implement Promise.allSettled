function allSettled(promises) {
  const wrappedPromises = [...promises].map(el => Promise.resolve(el))

  if(wrappedPromises.length === 0) {
    return Promise.resolve([])
  }

  return new Promise(resolve => {
    const result = new Array(wrappedPromises.length)
    let fulfilledPromisesCount = 0

    wrappedPromises.forEach((promise, index) => {
      promise
        .then(value => {
          result[index] = { status: 'fulfilled', value }

          fulfilledPromisesCount++

          if(fulfilledPromisesCount === wrappedPromises.length) {
            resolve(result)
          }
        })
        .catch((err) => {
          result[index] = { status: 'rejected', reason: err }

          fulfilledPromisesCount++

          if(fulfilledPromisesCount === wrappedPromises.length) {
            resolve(result)
          }
        })
    })
  })
}
