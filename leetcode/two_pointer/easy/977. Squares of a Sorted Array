https://leetcode.com/problems/squares-of-a-sorted-array/description/

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 
Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.

Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?

Solution:
var sortedSquares = function(nums) {
    let right = pointer = nums.length - 1
    let left = 0
    let result = Array.from(nums.length)

    while(left <= right) {
        const leftValue = Math.abs(nums[left])
        const rightValue = Math.abs(nums[right])

        if(rightValue > leftValue) {
            result[pointer--] = rightValue ** 2
            right--
        } else {
            result[pointer--] = leftValue ** 2
            left++
        }
    }

    return result
};
