https://leetcode.com/problems/valid-sudoku/description/

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:
A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.

Example 1:
Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Example 2:
Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 
Constraints:
board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.

Solution: Time O(ROWS * COLS) | Space O(ROWS * COLS)
var isValidSudoku = function(board) {
    for(let i = 0; i < 9; i++) {
        const cols = new Set()
        const rows = new Set()
        const squares = new Set()

        for(let j = 0; j < board.length; j++) {
            const element = board[i][j]
            const squareKey = [Math.floor(i / 3), Math.floor(j / 3)].toString()

            if(element === '.') {
                continue
            }

            if(!colsMap.has(j)) {
                colsMap.set(j, new Set())
            }

            if(!rowsMap.has(i)) {
                rowsMap.set(i, new Set())
            }

            if(!squaresMap.has(squareKey)) {
                squaresMap.set(squareKey, new Set())
            }

            const colsSet = colsMap.get(j)
            const rowsSet = rowsMap.get(i)
            const squareSet = squaresMap.get(squareKey)

            if(colsSet.has(element) || rowsSet.has(element)|| squareSet.has(element)) {
                return false
            }

            colsSet.add(element)
            rowsSet.add(element)
            squareSet.add(element)
        }
    }

    return true
};
