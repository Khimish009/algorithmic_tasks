# https://leetcode.com/problems/valid-parentheses/description/

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
1) Open brackets must be closed by the same type of brackets.
2) Open brackets must be closed in the correct order.
3) Every close bracket has a corresponding open bracket of the same type.

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false

Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

Solution:
var isValid = function(s) {
  if (s.length % 2) return false
  const stack = [];
  
  for (let i = 0 ; i < s.length ; i++) {
      let c = s.charAt(i);
      switch(c) {
          case '(': stack.push(')')
              break
          case '[': stack.push(']')
              break
          case '{': stack.push('}')
              break
          default:
              if (c !== stack.pop()) {
                  return false
              }
      }
  }
  
  return !stack.length
}

Another solution:
var isValid = function(s) {   
  const stack = []
  const map = {
    '(': ')',
    '[': ']',
    '{': '}'
  }
  
  for (let i = 0 ; i < s.length ; i++) {
      let c = s[i]
      if (map[c]) {
        stack.push(map[c])
      } else if (c !== stack.pop()) {
        return false
      } 
  }
  
  return !stack.length
}
