Solution 1:
    Time complexity O(n + m)
    Space complexity O(n)

var numJewelsInStones = function(jewels, stones) {
    const jewelSet = new Set(jewels)
    let count = 0
    
    for (const stone of stones) {
        if (jewelSet.has(stone)) {
            count++
        }
    }

    return count
};

Solution 2:
    Time complexity O(n + m)
    Space complexity O(m)

var numJewelsInStones = function(jewels, stones) {
    const hashMap = new Map()
    
    for (const stone of stones) {
        hashMap.set(stone, (hashMap.get(stone) || 0) + 1)
    }

    return jewels.split('').reduce((acc, curr) => acc + (hashMap.get(curr) || 0), 0)
};


You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.

Letters are case sensitive, so "a" is considered a different type of stone from "A".
 
Example 1:
Input: jewels = "aA", stones = "aAAbbbb"
Output: 3
Example 2:

Input: jewels = "z", stones = "ZZ"
Output: 0
 
Constraints:
1 <= jewels.length, stones.length <= 50
jewels and stones consist of only English letters.
All the characters of jewels are unique.
