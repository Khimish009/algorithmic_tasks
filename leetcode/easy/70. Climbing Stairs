Solution 1:
    Time complexity O(n)
    Space complexity O(1)

var climbStairs = function(n) {
    if (n === 1) return 1

    let prevStep1 = 1
    let prevStep2 = 1

    for (let currentStep = 2; currentStep <= n; currentStep++) {
        const currentWays = prevStep1 + prevStep2
        prevStep2 = prevStep1
        prevStep1 = currentWays
    }

    return prevStep1
};


Solution 2:
    Time complexity O(n)
    Space complexity O(n)

var climbStairs = function(n) {
    function countWays(currentStep, memo) {
        if (currentStep > n) {
            return 0
        }

        if (currentStep === n) {
            return 1
        }

        if (memo[currentStep]) {
            return memo[currentStep]
        }

        const result = countWays(currentStep + 1, memo) + countWays(currentStep + 2, memo)

        memo[currentStep] = result

        return result
    }

    return countWays(0, {})
};

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45
