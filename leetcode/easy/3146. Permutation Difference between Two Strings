Solution 1:
    Time complexity O(n)
    Space complexity O(1)

var findPermutationDifference = function(s, t) {
    const arr = Array(26).fill(0)

    for(let i = 0; i < s.length; i++) {
        const index = getIndex(s[i])
        arr[index] = i
    }

    for(let i = 0; i < t.length; i++) {
        const index = getIndex(t[i])
        arr[index] = Math.abs(arr[index] - i)
    }

    return arr.reduce((acc, curr) => acc + curr, 0)
};

const getIndex = (char) => char.charCodeAt() - 'a'.charCodeAt();


Solution 2:
    Time complexity O(n)
    Space complexity O(n)
var findPermutationDifference = function(s, t) {
    const hashMap = new Map()
    let result = 0

    for(let i = 0; i < s.length; i++) {
        const character = s[i]

        hashMap.set(character, i)
    }

    for(let i = 0; i < t.length; i++) {
        const character = t[i]

        result += Math.abs(hashMap.get(character) - i)
    }

    return result
};

You are given two strings s and t such that every character occurs at most once in s and t is a permutation of s.
The permutation difference between s and t is defined as the sum of the absolute difference between the index of the occurrence of each character in s and the index of the occurrence of the same character in t.
Return the permutation difference between s and t.

Example 1:
Input: s = "abc", t = "bac"

Output: 2

Explanation:
For s = "abc" and t = "bac", the permutation difference of s and t is equal to the sum of:

The absolute difference between the index of the occurrence of "a" in s and the index of the occurrence of "a" in t.
The absolute difference between the index of the occurrence of "b" in s and the index of the occurrence of "b" in t.
The absolute difference between the index of the occurrence of "c" in s and the index of the occurrence of "c" in t.
That is, the permutation difference between s and t is equal to |0 - 1| + |1 - 0| + |2 - 2| = 2.

Example 2:
Input: s = "abcde", t = "edbac"

Output: 12

Explanation: The permutation difference between s and t is equal to |0 - 3| + |1 - 2| + |2 - 4| + |3 - 1| + |4 - 0| = 12.

Constraints:
1 <= s.length <= 26
Each character occurs at most once in s.
t is a permutation of s.
s consists only of lowercase English letters.
