Solution 1:
    Time complexity O(n)
    Space complexity O(n)

var twoOutOfThree = function(nums1, nums2, nums3) {
    const hashMap = new Map()
    const result = []

    const addToMap = (nums, bitMask) => {
        for (const num of nums) {
            if (!hashMap.has(num)) {
                hashMap.set(num, 0)
            }

            hashMap.set(num, hashMap.get(num) | bitMask)
        }
    }

    addToMap(nums1, 0b001)
    addToMap(nums2, 0b010)
    addToMap(nums3, 0b100)

    for (const [key, value] of hashMap.entries()) {
        if ((value & (value - 1)) !== 0) {
            result.push(key)
        }
    }

    return result
};


Solution 2:
    Time complexity O(n + m + k)
    Space complexity O(n + m + k)

var twoOutOfThree = function(nums1, nums2, nums3) {
    const hashMap = new Map()
    const result = []

    for (const num of [...new Set(nums1)]) {
        hashMap.set(num, (hashMap.get(num) || 0) + 1)
    }

    for (const num of [...new Set(nums2)]) {
        hashMap.set(num, (hashMap.get(num) || 0) + 1)
    }


    for (const num of [...new Set(nums3)]) {
        hashMap.set(num, (hashMap.get(num) || 0) + 1)
    }

    for (const [key, value] of hashMap.entries()) {
        if (value > 1) {
            result.push(key)
        }
    }


    return result
};
