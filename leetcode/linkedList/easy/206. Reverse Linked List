https://leetcode.com/problems/reverse-linked-list/submissions/1102298287/

Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]

Example 3:
Input: head = []
Output: []

Constraints:
The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000

Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?

Solution 1: Time O(n), space O(1)
var reverseList = function(head) {
    let tmp = null
    let lastNode = null

    while(head) {
        tmp = head.next
        head.next = lastNode
        lastNode = head
        head = tmp
    }

    return lastNode
};

Solution 2: Time O(n), space O(n)
var reverseList = function(head) {
    const nodes = []

    while(head) {
        nodes.push(head.val)
        head = head.next
    }

    const newHead = new ListNode(0)
    let tmp = newHead

    for(let i = nodes.length - 1; i >= 0; i--) {
        tmp.next = new ListNode(nodes[i])
        tmp = tmp.next
    }

    return newHead.next
};
