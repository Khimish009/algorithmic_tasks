https://leetcode.com/problems/middle-of-the-linked-list/description/

Given the head of a singly linked list, return the middle node of the linked list. If there are two middle nodes, return the second middle node.

Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]

Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 
Constraints:
The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

Better Solution: Time O(n), Space O(1)
var middleNode = function(head) {
    let slow = fast = head

    while(fast && fast.next) {
        fast = fast.next.next
        slow = slow.next
    }

    return slow
};

My Solution: Time O(n), Space O(1)
var middleNode = function(head) {
    let result = null
    let length = 0
    let tmp = head

    while(tmp) {
        length++
        tmp = tmp.next
    }

    for(let i = 0; i < Math.floor(length / 2) + 1; i++) {
        result = head
        head = head.next
    }

    return result
};
