https://leetcode.com/problems/palindrome-linked-list/description/

Given the head of a singly linked list, return true if it is a  palindrome or false otherwise.

Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false

Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9

Follow up: Could you do it in O(n) time and O(1) space?

Solution: Time O(n), Space O(1)
var isPalindrome = function(head) {
    let fast = slow = head

    while(fast && fast.next) {
        fast = fast.next.next
        slow = slow.next
    }

    let prevNode = null

    while(slow) {
        const tmp = slow.next
        slow.next = prevNode
        prevNode = slow
        slow = tmp
    }

    let left = head
    let right = prevNode

    while(right) {
        if(left.val !== right.val) {
            return false
        }

        left = left.next
        right = right.next
    }

    return true
};
