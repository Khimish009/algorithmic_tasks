https://leetcode.com/problems/single-number/description/

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.
 
Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1
 
Constraints:
1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

Solution 1: Time O(N), Space O(1)
function singleNumber(nums) {
  let result = 0

  for (const num of nums) {
    result = result ^ num
  }

  return result
}

Solution 2: Time O(N), Space O(N)
function singleNumber(nums) {
  let result = nums[0]
  let hashMap = {}

  for (const num of nums) {
    if (!(num in hashMap)) {
      hashMap[num] = 0
    }

    hashMap[num]++
  }

  for (const [key, value] of Object.entries(hashMap)) {
    if (value === 1) {
      result = key
    }
  }

  return result
}
